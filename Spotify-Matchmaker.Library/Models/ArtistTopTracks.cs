// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SpotifyMatchmaker.Library.Models;
//
//    var artistTopTracks = ArtistTopTracks.FromJson(jsonString);

namespace SpotifyMatchmaker.Library.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ArtistTopTracks
    {
        [JsonProperty("tracks")]
        public Track[] Tracks { get; set; }
    }

    public partial class Album
    {
        [JsonProperty("total_tracks")]
        public long TotalTracks { get; set; }
    }

    public enum TrackType { Track };

    public partial class ArtistTopTracks
    {
        public static ArtistTopTracks FromJson(string json) => JsonConvert.DeserializeObject<ArtistTopTracks>(json, SpotifyMatchmaker.Library.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ArtistTopTracks self) => JsonConvert.SerializeObject(self, SpotifyMatchmaker.Library.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }


    internal class TrackTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TrackType) || t == typeof(TrackType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "track")
            {
                return TrackType.Track;
            }
            throw new Exception("Cannot unmarshal type TrackType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TrackType)untypedValue;
            if (value == TrackType.Track)
            {
                serializer.Serialize(writer, "track");
                return;
            }
            throw new Exception("Cannot marshal type TrackType");
        }

        public static readonly TrackTypeConverter Singleton = new TrackTypeConverter();
    }
}
