// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SpotifyMatchmaker.Library.Models;;
//
//    var topArtists = TopArtists.FromJson(jsonString);

namespace SpotifyMatchmaker.Library.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using Equ;

    public partial class TopArtists
    {
        [JsonProperty("items")]
        public Artist[] Artists { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("limit")]
        public long Limit { get; set; }

        [JsonProperty("offset")]
        public long Offset { get; set; }

        [JsonProperty("previous")]
        public Uri Previous { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }

        [JsonProperty("next")]
        public Uri Next { get; set; }
    }

    public partial class Artist : MemberwiseEquatable<Artist>
    {
        [MemberwiseEqualityIgnore]
        [JsonProperty("external_urls")]
        public ExternalUrls ExternalUrls { get; set; }

        [MemberwiseEqualityIgnore]
        [JsonProperty("followers")]
        public Followers Followers { get; set; }

        [MemberwiseEqualityIgnore]
        [JsonProperty("genres")]
        public string[] Genres { get; set; }

        [MemberwiseEqualityIgnore]
        [JsonProperty("href")]
        public Uri Href { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [MemberwiseEqualityIgnore]
        [JsonProperty("images")]
        public Image[] Images { get; set; }

        [MemberwiseEqualityIgnore]
        [JsonProperty("name")]
        public string Name { get; set; }

        [MemberwiseEqualityIgnore]
        [JsonProperty("popularity")]
        public long Popularity { get; set; }

        [MemberwiseEqualityIgnore]
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [MemberwiseEqualityIgnore]
        [JsonProperty("uri")]
        public string Uri { get; set; }
    }

    public partial class ExternalUrls
    {
        [JsonProperty("spotify")]
        public Uri Spotify { get; set; }
    }

    public partial class Followers
    {
        [JsonProperty("href")]
        public Uri Href { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }
    }

    public enum TypeEnum { Artist };

    public partial class TopArtists
    {
        public static TopArtists FromJson(string json) => JsonConvert.DeserializeObject<TopArtists>(json, SpotifyMatchmaker.Library.Models.TopArtistsConverter.Settings);
    }

    public static class TopArtistsSerialize
    {
        public static string ToJson(this TopArtists self) => JsonConvert.SerializeObject(self, SpotifyMatchmaker.Library.Models.TopArtistsConverter.Settings);
    }

    internal static class TopArtistsConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "artist")
            {
                return TypeEnum.Artist;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Artist)
            {
                serializer.Serialize(writer, "artist");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
