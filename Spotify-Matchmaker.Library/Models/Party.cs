using System;
using System.Collections.Generic;
using Microsoft.Azure.Cosmos.Table;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SpotifyMatchmaker.Library.Models;
//
//    var party = Party.FromJson(jsonString);

namespace SpotifyMatchmaker.Library.Models
{

    public partial class Party : TableEntity
    {
        /// <summary>
        /// Unique party code to pair friends together
        /// </summary>
        /// <value></value>
        [JsonProperty("party_code")]
        public string PartyCode { get => this.RowKey; set => this.RowKey = value; }

        /// <summary>
        /// The host's Spotify access token
        /// </summary>
        /// <value></value>
        [JsonProperty("host")]
        public string Host { get; set; }

        /// <summary>
        /// Spotift access token for person #2
        /// </summary>
        /// <value></value>
        [JsonProperty("person2")]
        public string Person2 { get; set; }

        /// <summary>
        /// Spotify access token for person #3
        /// </summary>
        /// <value></value>
        [JsonProperty("person3")]
        public string Person3 { get; set; }

        /// <summary>
        /// Spotify access token for person #4
        /// </summary>
        /// <value></value>
        [JsonProperty("person4")]
        public string Person4 { get; set; }

        /// <summary>
        /// Spotify access token for person #5
        /// </summary>
        /// <value></value>
        [JsonProperty("person5")]
        public string Person5 { get; set; }

        public Party(string partyCode)
        {
            this.PartyCode = partyCode;
            this.PartitionKey = "parties";
        }

    }

    public partial class Party
    {
        public static Party FromJson(string json) => JsonConvert.DeserializeObject<Party>(json, SpotifyMatchmaker.Library.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Party self) => JsonConvert.SerializeObject(self, SpotifyMatchmaker.Library.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
